diff --git a/0001-Corrigido-problema-do-model.patch b/0001-Corrigido-problema-do-model.patch
deleted file mode 100644
index b02bfba..0000000
--- a/0001-Corrigido-problema-do-model.patch
+++ /dev/null
@@ -1,50 +0,0 @@
-diff --git a/teste/controller.py b/teste/controller.py
-index da4b704..821c6d5 100644
---- a/teste/controller.py
-+++ b/teste/controller.py
-@@ -1,5 +1,5 @@
--from view import *
--from model import *
-+from view import View
-+from model import Cd
- 
- class Controller(object):
-  
-diff --git a/teste/database.sqlite b/teste/database.sqlite
-index 42443b37964538c48e9c7b1144e4a207f77d49e3..c3121cbdf3cd9921275c28a4889dba52f53ba1bb 100644
-GIT binary patch
-delta 70
-zcmZn=Xb_kn&B#1a#+jd)LHCggF9QPuBl8>v<~f@MS@f7E&tcBsU}ApD!2FZ>El}hk
-ZvoIGED}%5gZ(>TZks&K1D+4btF90e84wwJ{
-
-delta 59
-zcmZn=Xb_kn&B!!S#+jdqLHCh7F9QPuBl8>v<~f@MS@f7E&tcABV`Tox!2A=)zr#GS
-OL71JDk(Gg$mlptwa17u8
-
-diff --git a/teste/model.py b/teste/model.py
-index e23e267..662f018 100644
---- a/teste/model.py
-+++ b/teste/model.py
-@@ -71,4 +71,4 @@ class Cd(object):
-         return _all
-         
-         
--        
-\ No newline at end of file
-+        
-diff --git a/teste/view.py b/teste/view.py
-index 2babbc5..305b56c 100644
---- a/teste/view.py
-+++ b/teste/view.py
-@@ -9,7 +9,7 @@ class View():
- 		artist = raw_input("Artist: ")
- 		album = raw_input("Album: ")
- 		year = raw_input("Year: ")
--		newCd = (artist,album,year)
-+		newCd = Cd(artist, album, year)
- 		controller.callInsert(newCd)
- 		print("New cd inserted sucessfully")
- 		self.showMenu		
--- 
-1.7.10.2
-
diff --git a/teste/controller.py b/teste/controller.py
index 821c6d5..836d37b 100644
--- a/teste/controller.py
+++ b/teste/controller.py
@@ -1,22 +1,46 @@
+# -*- encoding: utf-8 -*-
 from view import View
 from model import Cd
+from debug import Logar
 
-class Controller(object):
- 
+class Controller(object): 
+    @Logar 
     def __init__(self):
         self.model = Cd()
-        self.view = View()
-        
+        self.view = View(self)
 
-    def callInsert(self, cd):
-        self.model.save(cd)
-        
-    def callRemove(self, cd):
-        self.model.delete(cd)
+    @Logar 
+    def main(self):
+        ''' Executa a tela principal '''
+        print "==> Controller.main()"
+        self.view.showMenu()
 
+    @Logar 
+    def callInsert(self):
+        ''' Lê os dados, adiciona e mostra se deu certo '''
+        print "==> Callback: callInsert()"
+        artist = raw_input("Artist: ")
+        album = raw_input("Album: ")
+        year = raw_input("Year: ")
+        self.model.save(Cd(artist=artist, album=album, year=year))
+        print "New cd inserted sucessfully"
+
+    @Logar         
+    def callRemove(self):
+        ''' Mostra a lista, lê um código e manda remover. '''
+        print "==> Callback: callListAll()"
+        self.callListAll()
+        selection = raw_input("Which one do you wanna remove?:  ")
+        self.model.delete(selection)
+        print "Done."
+
+    @Logar 
     def callListAll(self):
-        self.model.showAll
-        
-  
+        ''' Imprime a lista de cds e em seguida o menu '''
+        print "==> Callback: callListAll()"
+        for cd in self.model.getAll():
+            print cd
 
+if __name__ == "__main__":
+    print "Execute ./main.py"
 
diff --git a/teste/database.sqlite b/teste/database.sqlite
deleted file mode 100644
index 0d79de8..0000000
Binary files a/teste/database.sqlite and /dev/null differ
diff --git a/teste/debug.py b/teste/debug.py
new file mode 100644
index 0000000..d4c4ee5
--- /dev/null
+++ b/teste/debug.py
@@ -0,0 +1,25 @@
+# -*- encoding: utf-8 -*-
+
+DebuggerAtivo=True
+
+def Logar(fn):
+    global DebuggerAtivo
+    import inspect
+    varList, _, _, default = inspect.getargspec(fn)
+    d = {}
+    if default is not None:
+        d = dict((varList[-len(default):][i], v) for i, v in enumerate(default))
+    def f(*argt, **argd):
+        if DebuggerAtivo:
+            print ('\033[1;32mEntrando em %s\033[0m' % fn).center(100, '=')
+            print d
+        ret = fn(*argt, **argd)
+        if DebuggerAtivo:
+            try:
+                print 'Retorno: %s' % ret
+            except:
+                pass
+            print ('\033[1;34mExit %s\033[0m' % fn).center(100, '=')
+        return ret
+    return f
+
diff --git a/teste/main.py b/teste/main.py
new file mode 100755
index 0000000..ce7212a
--- /dev/null
+++ b/teste/main.py
@@ -0,0 +1,14 @@
+#!/usr/bin/python2
+# -*- encoding: utf-8 -*-
+import controller
+from model import Cd
+
+if __name__ == "__main__":
+    print "==> Iniciando"
+    model = Cd('artist', 'album', 'year')
+    model.createDatabase()
+    try:
+        controller.Controller().main()
+    except KeyboardInterrupt, e:
+        pass
+
diff --git a/teste/model.py b/teste/model.py
index adc68db..6abffd2 100644
--- a/teste/model.py
+++ b/teste/model.py
@@ -1,54 +1,77 @@
+# -*- encoding: utf-8 -*-
 import sqlite3
-class Cd(object):
-    
+from debug import Logar
+
+class Cd(object):  
+    @Logar  
     def __init__(self, cod=None, artist='', album='' , year='', database='database.sqlite'):
+        print "==> Cd.__init__(",cod,",",artist,",",album,",",year,",",database,")"
         self.cod = cod
         self.artist = artist
         self.album = album
         self.year = year
         self.database = database        
 
+    @Logar  
     def createDatabase(self):        
+        print "==> Cd.createDatabase()"
         connection = sqlite3.connect('database.sqlite')
         cur = connection.cursor()
-        cur.execute('CREATE TABLE IF NOT EXISTS cds (cod INTEGER PRIMARY KEY,artist TEXT, album TEXT,year NUMERIC);')
+        cur.execute('CREATE TABLE IF NOT EXISTS cds (cod INTEGER PRIMARY KEY,artist TEXT, album TEXT,year TEXT)')
         connection.commit()
         cur.close()        
     
+    @Logar  
+    def data(self):
+        ''' Retorna uma tupla com os dados do CD '''
+        return (self.cod, self.artist, self.album, self.year)
+
+    @Logar  
     def save(self, cd):  
-        sql = 'INSERT INTO cds (artist,album,year) VALUES (?, ?, ?)'
+        print "==> Cd.save(",cd.__dict__,")"
+        sql = 'INSERT INTO cds (artist, album, year) VALUES (?, ?, ?)'
         con = sqlite3.connect(self.database)
             
         cur = con.cursor()
-        cur.execute(sql, (cd.artist, cd.album, cd.year))
+        cur.execute(sql, cd.data()[1:]) # remove "cod" da tupla
         con.commit()
         con.close()
         
-    def delete(self, cd):
+    @Logar  
+    def delete(self, cod):
+        print "==> Cd.delete(",cod,")"
         sql = 'DELETE FROM cds WHERE cod = ?'
         con = sqlite3.connect(self.database)
 
         cur = con.cursor()
-        cur.execute(sql, (cd.cod,))
+        cur.execute(sql, (cod,))
         con.commit()
         con.close()
         
-    def showAall(self):
+    @Logar  
+    def getAll(self):
+        print "==> Cd.getall()"
         _all = []
-        sql = 'SELECT * FROM cds'
+        sql = 'SELECT cod, artist, album, year FROM cds'
         con = sqlite3.connect(self.database)
-        
+
         cur = con.cursor()
         cur.execute(sql)
         result = cur.fetchall()
-        
+
         for i in result:
             row = list(i)
-            _all.append(Cd(row[0], row[1], row[2], row[3]))             
-       
-        con.commit()
+            cd = Cd(cod=row[0], artist=row[1], album=row[2], year=row[3])
+            print '==> Processando', cd.__dict__
+            _all.append(cd)
+
         con.close()
         return _all
-        
-        
-        
+
+    @Logar  
+    def __str__(self):
+        return 'Cod: %d\tArtist: %s\tAlbum: %s\tYear: %s' % self.data()
+
+if __name__ == "__main__":
+    print "Execute ./main.py"
+
diff --git a/teste/view.py b/teste/view.py
index 305b56c..3d91e7a 100644
--- a/teste/view.py
+++ b/teste/view.py
@@ -1,60 +1,43 @@
-from controller import *
-from model import *
-class View():
-
-	def __init__(self):
-		pass
-
-	def insert(self):
-		artist = raw_input("Artist: ")
-		album = raw_input("Album: ")
-		year = raw_input("Year: ")
-		newCd = Cd(artist, album, year)
-		controller.callInsert(newCd)
-		print("New cd inserted sucessfully")
-		self.showMenu		
+# -*- encoding: utf-8 -*-
+from debug import Logar
 
-	def remove(self):
-		self.printHeader
-		self.printAll
-		selection = raw_input("Which cd do you wanna remove?:  ")
-		print selection
-		self.showMenu	
-		
-	def printHeader(self):
-		print "Artist / Album / Year"	
+class View():
+    @Logar 
+    def __init__(self, controller):
+        print "==> View.__init__()"
+        self.controller = controller
 
-	def printAll(self):
-		self.printHeader
-		print controller.callListAll
-		
-	def invalidMenuEntry(self):
-		print "Invalid Menu Option"
+    @Logar 
+    def printHeader(self):
+        print "Artist / Album / Year"    
 
-	def showMenu(self):
-		menu = {"1": self.insert, "2": self.remove, "3": self.printAll}
-		while True:
-			print "Super Mega Hyper CD Explorer 0.003 pre Alpha"
-			print "--------------------------------------------"
-			print "Main Menu"
-			print "1 - Insert a CD"
-			print "2 - Remove a CD"
-			print "3 - Show all CDs"
-			print "4 - Leave this thing."
-			print "--------------------------------------------"
-			opt = raw_input("Choose your option: ")
-			if "4" == opt:
-				print"Leaving the system"
-				return
-			parse = menu.get(opt, self.invalidMenuEntry)
-			parse()			
+    @Logar 
+    def invalidMenuEntry(self):
+        print "Invalid Menu Option"
 
-	def run(self):
-			self.showMenu()			
-			
+    @Logar 
+    def showMenu(self):
+        print "==> View.showMenu()"
+        menu = {"1": self.controller.callInsert, 
+                "2": self.controller.callRemove, 
+                "3": self.controller.callListAll}
+        while True:
+            print "==> View.showMenu(): while True"
+            print "\nSuper Mega Hyper CD Explorer 0.003 pre Alpha"
+            print "--------------------------------------------"
+            print "Main Menu"
+            print "1 - Insert a CD"
+            print "2 - Remove a CD"
+            print "3 - Show all CDs"
+            print "4 - Leave this thing."
+            print "--------------------------------------------"
+            opt = raw_input("Choose your option: ")
+            if "4" == opt:
+                print"Leaving the system"
+                return
+            parse = menu.get(opt, self.invalidMenuEntry)
+            parse()            
+            
 if __name__ == "__main__":
-	model = Cd('artist', 'album', 'year')
-	model.createDatabase()
-	controller = Controller()
-	view = View();
-	view.run()			
+    print "Execute ./main.py"
+
